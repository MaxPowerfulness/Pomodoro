(()=>{"use strict";var e={647:(e,t,o)=>{o.r(t),o.d(t,{endSession:()=>m,removeFormListener:()=>d,saveSession:()=>c,sessionCount:()=>s});let n=1,s=[];const r=document.getElementById("formPopUp"),l=document.querySelector("form"),i=document.querySelector("#overlayDiv"),a=document.querySelector("textarea");function c(){let e={start:new Date,end:null,comment:null};localStorage.setItem(`Session ${n}`,JSON.stringify(e))}function m(){let e=JSON.parse(localStorage.getItem(`Session ${n}`));e.end=new Date,localStorage.setItem(`Session ${n}`,JSON.stringify(e)),r.style.display="block",i.classList.toggle("overlay"),s.push(n)}function d(){const e=getEventListeners(l.submit);e&&e.forEach((e=>l.removeEventListener("submit",e.listener)))}l.addEventListener("submit",(function(e){e.preventDefault(),r.style.display="none",i.classList.toggle("overlay");let t=JSON.parse(localStorage.getItem(`Session ${n}`));t.comment=a.value,localStorage.setItem(`Session ${n}`,JSON.stringify(t)),n++}))}},t={};function o(n){var s=t[n];if(void 0!==s)return s.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,o),r.exports}o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e=o(647);const t=document.querySelector("#gridContainer"),n=["sessionNum","start","end","comment"];window.addEventListener("load",(()=>{console.log(getEventListeners(form.submit).length),async function(){const{sessionCount:e}=await Promise.resolve().then(o.bind(o,647));for(let o=0;o<e.length;o++)for(let s=0;s<4;o++){let r=document.createElement("div");r.classList.add(n[s],"item"),r.textContent=0==s?localStorage.key(e[o]):JSON.parse(localStorage.getItem(`Session ${e[o]}[${n[s]}]`)),console.log(r),console.log("gridContainer",t),t.appendChild(r)}console.log("ran")}(),(0,e.removeFormListener)()})),console.log("test")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,